{"version":3,"sources":["components/CountDown.jsx","components/CountDownMonths.jsx","components/ViewSwitch.jsx","App.js","reportWebVitals.js","index.js"],"names":["targetTime","Date","getTime","CountDown","useState","now","currentTime","setCurrentTime","timeBetween","seconds","Math","floor","minutes","hours","days","useEffect","interval","setInterval","clearInterval","className","moment","CountDownMonths","duration","diff","years","months","ViewSwitch","showMonths","setShowMonths","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAEMA,EAAa,IAAIC,KAAK,cAAcC,UAE7BC,EAAY,WAAO,IAAD,EACSC,mBAASH,KAAKI,OADvB,mBACtBC,EADsB,KACTC,EADS,KAGvBC,EAAcR,EAAaM,EAC3BG,EAAUC,KAAKC,MAAOH,EAAc,IAAQ,IAC5CI,EAAUF,KAAKC,MAAOH,EAAc,IAAO,GAAM,IACjDK,EAAQH,KAAKC,MAAOH,EAAW,KAAuB,IACtDM,EAAOJ,KAAKC,MAAMH,EAAW,OAUnC,OARAO,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BV,EAAeN,KAAKI,SACnB,KAEH,OAAO,kBAAMa,cAAcF,MAC1B,IAGD,qCACE,kDACA,oBAAGG,UAAU,UAAb,UACE,iCAAOL,EAAP,QACA,iCAAOD,EAAP,QACA,iCAAOD,EAAP,UACA,iCAAOH,EAAP,c,gBCzBFT,EAAaoB,IAAO,cAEbC,EAAkB,WAAO,IAAD,EACGjB,mBAASgB,OADZ,mBAC5Bd,EAD4B,KACfC,EADe,KAE7BC,EAAcY,IAAOE,SAAStB,EAAWuB,KAAKjB,IAUpD,OARAS,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BV,EAAea,SACd,KAEH,OAAO,kBAAMF,cAAcF,MAC1B,IAGD,qCACE,kDACA,oBAAGG,UAAU,UAAb,UACE,iCAAOX,EAAYgB,QAAnB,SACA,iCAAOhB,EAAYiB,SAAnB,QACA,iCAAOjB,EAAYM,OAAnB,QACA,iCAAON,EAAYK,QAAnB,QACA,iCAAOL,EAAYI,UAAnB,UACA,iCAAOJ,EAAYC,UAAnB,eCtBKiB,EAAa,WAAO,IAAD,EACMtB,oBAAS,GADf,mBACvBuB,EADuB,KACXC,EADW,KAE9B,OACE,gCACGD,GAAc,cAAC,EAAD,KACbA,GAAc,cAAC,EAAD,IAChB,wBACEE,QAAS,WACPD,GAAeD,IAFnB,8B,MCCSG,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,OCMSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c9a818e7.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst targetTime = new Date(\"2035-01-01\").getTime();\r\n\r\nexport const CountDown = () => {\r\n  const [currentTime, setCurrentTime] = useState(Date.now());\r\n\r\n  const timeBetween = targetTime - currentTime;\r\n  const seconds = Math.floor((timeBetween / 1000) % 60);\r\n  const minutes = Math.floor((timeBetween / 1000 / 60) % 60);\r\n  const hours = Math.floor((timeBetween / (1000 * 60 * 60)) % 24);\r\n  const days = Math.floor(timeBetween / (1000 * 60 * 60 * 24));\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrentTime(Date.now());\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <p>Deadline comes in</p>\r\n      <p className=\"counter\">\r\n        <span>{days}d </span>\r\n        <span>{hours}h </span>\r\n        <span>{minutes}min </span>\r\n        <span>{seconds}s</span>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst targetTime = moment(\"2035-01-01\");\r\n\r\nexport const CountDownMonths = () => {\r\n  const [currentTime, setCurrentTime] = useState(moment());\r\n  const timeBetween = moment.duration(targetTime.diff(currentTime));\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrentTime(moment());\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <p>Deadline comes in</p>\r\n      <p className=\"counter\">\r\n        <span>{timeBetween.years()}yr </span>\r\n        <span>{timeBetween.months()}m </span>\r\n        <span>{timeBetween.days()}d </span>\r\n        <span>{timeBetween.hours()}h </span>\r\n        <span>{timeBetween.minutes()}min </span>\r\n        <span>{timeBetween.seconds()}s </span>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { CountDown } from \"./CountDown\";\r\nimport { CountDownMonths } from \"./CountDownMonths\";\r\n\r\nexport const ViewSwitch = () => {\r\n  const [showMonths, setShowMonths] = useState(true);\r\n  return (\r\n    <div>\r\n      {showMonths && <CountDownMonths />}\r\n      {!showMonths && <CountDown />}\r\n      <button\r\n        onClick={() => {\r\n          setShowMonths(!showMonths);\r\n        }}\r\n      >\r\n        Switch timer\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import { ViewSwitch } from \"./components/ViewSwitch\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <ViewSwitch />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}